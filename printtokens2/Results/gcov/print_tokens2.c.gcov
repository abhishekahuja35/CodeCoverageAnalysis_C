        -:    0:Source:print_tokens2.c
        -:    0:Graph:print_tokens2.gcno
        -:    0:Data:print_tokens2.gcda
        -:    0:Runs:4115
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#define TRUE 1
        -:   19:#define FALSE 0
        -:   20:
function main called 4115 returned 0% blocks executed 100%
     4115:   21:main(argc,argv)
        -:   22:int argc;
        -:   23:char *argv[3];
        -:   24:{  char *fname;
        -:   25:   token tok;
        -:   26:   token_stream tp;
     4115:   27:     if(argc==1)                  /* if not given filename,take as '""' */
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:   28:       {
     2955:   29:        fname= (char *) malloc(sizeof(char));
     2955:   30:        *fname = '\0';
        -:   31:       }
     1160:   32:     else if(argc==2)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1130:   33:        fname= argv[1];
        -:   34:     else
       30:   35:       { fprintf(stdout, "Error!,please give the token stream\n");
call    0 returned 100%
       30:   36:         exit(0);
call    0 returned 0%
        -:   37:       }
     4085:   38:    tp=open_token_stream(fname);  /* open token stream */
call    0 returned 99%
     4055:   39:    tok=get_token(tp);
call    0 returned 100%
    23151:   40:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
call    0 returned 100%
branch  1 taken 82%
branch  2 taken 18% (fallthrough)
        -:   41:    {
    19096:   42:       print_token(tok);
call    0 returned 100%
    19096:   43:       tok=get_token(tp);
call    0 returned 100%
        -:   44:    }
     4055:   45:    print_token(tok); /* print eof signal */
call    0 returned 100%
     4055:   46:    exit(0);
        -:   47:}
        -:   48:
        -:   49:/* stream.c code */
        -:   50:
        -:   51:/***********************************************/
        -:   52:/* NMAE:	open_character_stream          */
        -:   53:/* INPUT:       a filename                     */
        -:   54:/* OUTPUT:      a pointer to chacracter_stream */
        -:   55:/* DESCRIPTION: when not given a filename,     */
        -:   56:/*              open stdin,otherwise open      */
        -:   57:/*              the existed file               */
        -:   58:/***********************************************/
function open_character_stream called 4085 returned 99% blocks executed 100%
     4085:   59:character_stream open_character_stream(fname)
        -:   60:char *fname;
        -:   61:{ character_stream fp;
     4085:   62:  if(fname == NULL)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
     2955:   63:     fp=stdin;
     1130:   64:  else if ((fp=fopen(fname,"r"))== NULL)
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        -:   65:  {
       30:   66:       fprintf(stdout, "The file %s doesn't exists\n",fname);
call    0 returned 100%
       30:   67:       exit(0);
call    0 returned 0%
        -:   68:  }
     4055:   69:  return(fp);
        -:   70:}
        -:   71:
        -:   72:/**********************************************/
        -:   73:/* NAME:	get_char                      */
        -:   74:/* INPUT:       a pointer to char_stream      */
        -:   75:/* OUTPUT:      a character                   */
        -:   76:/**********************************************/
function get_char called 158391 returned 100% blocks executed 100%
   158391:   77:char get_char(fp)
        -:   78:character_stream fp;
        -:   79:{ char ch;
   158391:   80:  ch=getc(fp);
call    0 returned 100%
   158391:   81:  return(ch);
        -:   82:}
        -:   83:
        -:   84:/***************************************************/
        -:   85:/* NAME:      unget_char                           */
        -:   86:/* INPUT:     a pointer to char_stream,a character */
        -:   87:/* OUTPUT:    a character                          */
        -:   88:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   89:/***************************************************/
function unget_char called 3405 returned 100% blocks executed 100%
     3405:   90:char unget_char(ch,fp)
        -:   91:character_stream fp;
        -:   92:char ch;
        -:   93:{ char c;
     3405:   94:  c=ungetc(ch,fp);
call    0 returned 100%
     3405:   95:  if(c ==EOF)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:   96:    {
      759:   97:     return(c);
        -:   98:    }
        -:   99:  else
     2646:  100:     return(c);
        -:  101:}
        -:  102:
        -:  103:/* tokenizer.c code */
        -:  104:
        -:  105:
        -:  106:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  107:
        -:  108:
        -:  109:static int is_spec_symbol();
        -:  110:static int is_token_end();
        -:  111:static unget_error();
        -:  112:static int is_keyword();
        -:  113:static int is_identifier();
        -:  114:static int is_num_constant();
        -:  115:static int is_char_constant();
        -:  116:static int is_str_constant();
        -:  117:static int is_comment();
        -:  118:static void print_spec_symbol();
        -:  119:
        -:  120:/********************************************************/
        -:  121:/* NAME:	open_token_stream                       */
        -:  122:/* INPUT:       a filename                              */
        -:  123:/* OUTPUT:      a pointer to a token_stream             */
        -:  124:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  125:/*              input device as input source            */
        -:  126:/********************************************************/
function open_token_stream called 4085 returned 99% blocks executed 100%
     4085:  127:token_stream open_token_stream(fname)
        -:  128:char *fname;
        -:  129:{
        -:  130: token_stream fp;
     4085:  131: if(strcmp(fname,"")==0)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
     2955:  132:    fp=open_character_stream(NULL);
call    0 returned 100%
        -:  133: else
     1130:  134:    fp=open_character_stream(fname);
call    0 returned 97%
     4055:  135: return(fp);
        -:  136:}
        -:  137:
        -:  138:/********************************************************/
        -:  139:/* NAME :	get_token                               */
        -:  140:/* INPUT: 	a pointer to the tokens_stream          */
        -:  141:/* OUTPUT:      a token                                 */
        -:  142:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  143:/*              with different case  and get one token  */
        -:  144:/********************************************************/
function get_token called 23151 returned 100% blocks executed 96%
    23151:  145:token get_token(tp)
        -:  146:token_stream tp;
        -:  147:{ 
    23151:  148:  int i=0,j;
    23151:  149:  int id=0;
        -:  150:  char ch,ch1[2];
  1898382:  151:  for (j=0;j<=80;j++)          /* initial the buffer   */
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1875231:  152:      { buffer[j]='\0';} 
    23151:  153:   ch1[0]='\0';
    23151:  154:   ch1[1]='\0';
    23151:  155:   ch=get_char(tp);
call    0 returned 100%
    54915:  156:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
branch  0 taken 53%
branch  1 taken 47% (fallthrough)
branch  2 taken 10%
branch  3 taken 90% (fallthrough)
        -:  157:      {
    31764:  158:       ch=get_char(tp);
call    0 returned 100%
        -:  159:      } 
    23151:  160:   buffer[i]=ch;
    23151:  161:   if(is_eof_token(buffer)==TRUE)return(buffer);
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
    19096:  162:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
    14292:  163:   if(ch =='"')id=1;    /* prepare for string */
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
    14292:  164:   if(ch ==59)id=2;    /* prepare for comment */
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
    14292:  165:   ch=get_char(tp);
call    0 returned 100%
        -:  166:
   103476:  167:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
call    0 returned 100%
branch  1 taken 86%
branch  2 taken 14% (fallthrough)
        -:  168:   {
    89184:  169:       i++;
    89184:  170:       buffer[i]=ch;
    89184:  171:       ch=get_char(tp);
call    0 returned 100%
        -:  172:   }
    14292:  173:   ch1[0]=ch;                        /* hold the end charcater          */
    14292:  174:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
      759:  175:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
call    0 returned 100%
      759:  176:        if(ch==EOF)unget_error(tp);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      759:  177:        return(buffer);
        -:  178:      }
    13533:  179:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
     2375:  180:      { ch=unget_char(ch,tp);        /* then put back this character       */
call    0 returned 100%
    2375*:  181:        if(ch==EOF)unget_error(tp);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     2375:  182:        return(buffer);
        -:  183:      }
    11158:  184:   if(id==1)                  /* if end character is " and is string */
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
     1530:  185:     { i++;                     /* case,hold the second " in buffer    */
     1530:  186:       buffer[i]=ch;
     1530:  187:       return(buffer); 
        -:  188:     }
     9628:  189:   if(id==0 && ch==59)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -:  190:                                   /* when not in string or comment,meet ";" */
      271:  191:     { ch=unget_char(ch,tp);       /* then put back this character         */
call    0 returned 100%
     271*:  192:       if(ch==EOF)unget_error(tp);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      271:  193:       return(buffer); 
        -:  194:     }
     9357:  195:  return(buffer);                   /* return nomal case token             */
        -:  196:}
        -:  197:
        -:  198:/*******************************************************/
        -:  199:/* NAME:	is_token_end                           */
        -:  200:/* INPUT:       a character,a token status             */
        -:  201:/* OUTPUT:	a BOOLEAN value                        */
        -:  202:/*******************************************************/
function is_token_end called 103476 returned 100% blocks executed 100%
   103476:  203:static int is_token_end(str_com_id,ch)
        -:  204:char ch;
        -:  205:int str_com_id;
        -:  206:{ char ch1[2];  /* fixed array declaration MONI */
   103476:  207: ch1[0]=ch;
   103476:  208: ch1[1]='\0';
   103476:  209: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
   102717:  210: if(str_com_id==1)          /* is string token */
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
    21503:  211:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1530:  212:         return(TRUE);
        -:  213:      else
    19973:  214:         return(FALSE);
        -:  215:    }
        -:  216:
    81214:  217: if(str_com_id==2)    /* is comment token */
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
    19215:  218:   { if(ch=='\n')     /* for comment until meet end of line */
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     1876:  219:        return(TRUE);
        -:  220:      else
    17339:  221:        return(FALSE);
        -:  222:   }
        -:  223:
    61999:  224: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
    59624:  225: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        -:  226:                              /* others until meet blank or tab or 59 */
    51872:  227: return(FALSE);               /* other case,return FALSE */
        -:  228:}
        -:  229:
        -:  230:/****************************************************/
        -:  231:/* NAME :	token_type                          */
        -:  232:/* INPUT:       a pointer to the token              */
        -:  233:/* OUTPUT:      an integer value                    */
        -:  234:/* DESCRIPTION: the integer value is corresponding  */
        -:  235:/*              to the different token type         */
        -:  236:/****************************************************/
function token_type called 23151 returned 100% blocks executed 100%
    23151:  237:static int token_type(tok)
        -:  238:token tok;
        -:  239:{ 
    23151:  240: if(is_keyword(tok))return(keyword);
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
    20814:  241: if(is_spec_symbol(tok))return(spec_symbol);
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
    16010:  242: if(is_identifier(tok))return(identifier);
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
    13224:  243: if(is_num_constant(tok))return(num_constant);
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
    11971:  244: if(is_str_constant(tok))return(str_constant);
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
    10408:  245: if(is_char_constant(tok))return(char_constant);
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
     9855:  246: if(is_comment(tok))return(comment);
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
     7933:  247: if(is_eof_token(tok))return(end);
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
     3878:  248: return(error);                    /* else look as error token */
        -:  249:}
        -:  250:
        -:  251:/****************************************************/
        -:  252:/* NAME:	print_token                         */
        -:  253:/* INPUT:	a pointer to the token              */
        -:  254:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  255:/*              according the forms required        */
        -:  256:/****************************************************/
function print_token called 23151 returned 100% blocks executed 100%
    23151:  257:int print_token(tok)
        -:  258:token tok;
        -:  259:{ int type;
    23151:  260:  type=token_type(tok);
call    0 returned 100%
    23151:  261: if(type==error)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3878:  262:   { fprintf(stdout, "error,\"%s\".\n",tok);
call    0 returned 100%
        -:  263:   } 
    23151:  264: if(type==keyword)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     2337:  265:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
call    0 returned 100%
        -:  266:   }
    23151:  267: if(type==spec_symbol)print_spec_symbol(tok);
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
call    2 returned 100%
    23151:  268: if(type==identifier)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
     2786:  269:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
call    0 returned 100%
        -:  270:   }
    23151:  271: if(type==num_constant)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     1253:  272:   {fprintf(stdout, "numeric,%s.\n",tok);
call    0 returned 100%
        -:  273:   }
    23151:  274: if(type==str_constant)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1563:  275:   {fprintf(stdout, "string,%s.\n",tok);
call    0 returned 100%
        -:  276:   }
    23151:  277: if(type==char_constant)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      553:  278:   {tok=tok+1;
      553:  279:    fprintf(stdout, "character,\"%s\".\n",tok);
call    0 returned 100%
        -:  280:   }
    23151:  281: if(type==end) 
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
     4055:  282:   fprintf(stdout, "eof.\n");
call    0 returned 100%
    23151:  283:   }
        -:  284:
        -:  285:/* the code for tokens judgment function */
        -:  286:
        -:  287:/*************************************/
        -:  288:/* NAME:	is_eof_token         */
        -:  289:/* INPUT: 	a pointer to a token */
        -:  290:/* OUTPUT:      a BOOLEAN value      */
        -:  291:/*************************************/
function is_eof_token called 172003 returned 100% blocks executed 100%
   172003:  292:int is_eof_token(tok)
        -:  293:token tok;
        -:  294:{ 
   172003:  295:  if( *tok==EOF)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
    13683:  296:      return(TRUE);
        -:  297:  else
   158320:  298:      return(FALSE);
        -:  299:}
        -:  300:
        -:  301:/*************************************/
        -:  302:/* NAME:	is_comment           */
        -:  303:/* INPUT: 	a pointer to a token */
        -:  304:/* OUTPUT:      a BOOLEAN value      */
        -:  305:/*************************************/
function is_comment called 9855 returned 100% blocks executed 100%
     9855:  306:static int is_comment(ident)
        -:  307:token ident;
        -:  308:{
     9855:  309:  if( (*ident) ==59 )   /* the char is 59   */
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
     1922:  310:     return(TRUE);
        -:  311:  else
     7933:  312:     return(FALSE);
        -:  313:}
        -:  314:
        -:  315:/*************************************/
        -:  316:/* NAME:	is_keyword           */
        -:  317:/* INPUT: 	a pointer to a token */
        -:  318:/* OUTPUT:      a BOOLEAN value      */
        -:  319:/*************************************/
function is_keyword called 23151 returned 100% blocks executed 100%
    23151:  320:static int is_keyword(str)
        -:  321:    token  str;
        -:  322:{ 
    23151:  323: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
    22012:  324:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
     2337:  325:      return(TRUE);
        -:  326:  else 
    20814:  327:      return(FALSE);
        -:  328:}
        -:  329:
        -:  330:/*************************************/
        -:  331:/* NAME:	is_char_constant     */
        -:  332:/* INPUT: 	a pointer to a token */
        -:  333:/* OUTPUT:      a BOOLEAN value      */
        -:  334:/*************************************/
function is_char_constant called 10408 returned 100% blocks executed 100%
    10408:  335:static int is_char_constant(str)
        -:  336:    token str;
        -:  337:{
    10408:  338:  if ((*str)=='#' && isalpha(*(str+1)))
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
      553:  339:     return(TRUE);
        -:  340:  else  
     9855:  341:     return(FALSE);
        -:  342:}
        -:  343:
        -:  344:/*************************************/
        -:  345:/* NAME:	is_num_constant      */
        -:  346:/* INPUT: 	a pointer to a token */
        -:  347:/* OUTPUT:      a BOOLEAN value      */
        -:  348:/*************************************/
function is_num_constant called 13224 returned 100% blocks executed 100%
    13224:  349:static int is_num_constant(str)
        -:  350:    token  str;
        -:  351:{
    13224:  352:  int i=1;
        -:  353:  
    13224:  354:  if ( isdigit(*str)) 
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  355:    {
     2557:  356:    while ( *(str+i) != '\0' )   /* until meet token end sign */
branch  0 taken 51%
branch  1 taken 49% (fallthrough)
        -:  357:      {
     1304:  358:       if(isdigit(*(str+i)))
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
      919:  359:         i++;
        -:  360:       else
      385:  361:         return(FALSE);
        -:  362:      }                         /* end WHILE */
     1253:  363:    return(TRUE);
        -:  364:    }
        -:  365:  else
    11586:  366:   return(FALSE);               /* other return FALSE */
        -:  367:}
        -:  368:
        -:  369:/*************************************/
        -:  370:/* NAME:	is_str_constant      */
        -:  371:/* INPUT: 	a pointer to a token */
        -:  372:/* OUTPUT:      a BOOLEAN value      */
        -:  373:/*************************************/
function is_str_constant called 11971 returned 100% blocks executed 89%
    11971:  374:static int is_str_constant(str)
        -:  375:    token str;
        -:  376:{
    11971:  377:  int i=1;
        -:  378: 
    11971:  379:  if ( *str =='"')
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
  2871031:  380:     { while (*(str)!='\0')  /* until meet the token end sign */
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
  2871031:  381:         { if(*(str+i)=='"')
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     1563:  382:             return(TRUE);        /* meet the second '"'           */
        -:  383:           else
  2869468:  384:           i++;
        -:  385:         }               /* end WHILE */
    #####:  386:     return(FALSE);
        -:  387:    }
        -:  388:  else
    10408:  389:    return(FALSE);       /* other return FALSE */
        -:  390:}
        -:  391:/*************************************/
        -:  392:/* NAME:	is_identifier         */
        -:  393:/* INPUT: 	a pointer to a token */
        -:  394:/* OUTPUT:      a BOOLEAN value      */
        -:  395:/*************************************/
function is_identifier called 16010 returned 100% blocks executed 100%
    16010:  396:static int is_identifier(str)
        -:  397:    token  str;
        -:  398:{
    16010:  399:  int i=1;
        -:  400:
    16010:  401:  if ( isalpha( *str) ) 
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  402:     {
    22196:  403:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
        -:  404:           { 
    19410:  405:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
    17784:  406:               i++;
        -:  407:            else
     1626:  408:               return(FALSE);
        -:  409:           }      /* end WHILE */
     2786:  410:     return(TRUE);
        -:  411:     }
        -:  412:  else
    11598:  413:     return(FALSE);
        -:  414:}
        -:  415:
        -:  416:/******************************************/
        -:  417:/* NAME:	unget_error               */
        -:  418:/* INPUT:       a pointer to token stream */
        -:  419:/* OUTPUT: 	print error message       */
        -:  420:/******************************************/
function unget_error called 759 returned 100% blocks executed 100%
      759:  421:static unget_error(fp)
        -:  422:character_stream *fp;
        -:  423:{
      759:  424:fprintf(stdout,"It can not get charcter\n");
call    0 returned 100%
      759:  425:}
        -:  426:
        -:  427:/*************************************************/
        -:  428:/* NAME:        print_spec_symbol                */
        -:  429:/* INPUT:       a pointer to a spec_symbol token */
        -:  430:/* OUTPUT :     print out the spec_symbol token  */
        -:  431:/*              according to the form required   */
        -:  432:/*************************************************/
function print_spec_symbol called 4804 returned 100% blocks executed 100%
     4804:  433:static void print_spec_symbol(str)
        -:  434:token str;
        -:  435:{
     4804:  436:    if      (!strcmp(str,"("))
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  437:    {
      630:  438:             fprintf(stdout, "%s\n","lparen.");
call    0 returned 100%
      630:  439:             return;
        -:  440:    } 
     4174:  441:    if (!strcmp(str,")"))
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  442:    {
      690:  443:             fprintf(stdout, "%s\n","rparen.");
call    0 returned 100%
      690:  444:             return;
        -:  445:    }
     3484:  446:    if (!strcmp(str,"["))
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        -:  447:    {
      679:  448:             fprintf(stdout, "%s\n","lsquare.");
call    0 returned 100%
      679:  449:             return;
        -:  450:    }
     2805:  451:    if (!strcmp(str,"]"))
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -:  452:    {
      736:  453:             fprintf(stdout, "%s\n","rsquare.");
call    0 returned 100%
      736:  454:             return;
        -:  455:    }
     2069:  456:    if (!strcmp(str,"'"))
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  457:    {
      676:  458:             fprintf(stdout, "%s\n","quote.");
call    0 returned 100%
      676:  459:             return;
        -:  460:    }
     1393:  461:    if (!strcmp(str,"`"))
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:  462:    {
      707:  463:             fprintf(stdout, "%s\n","bquote.");
call    0 returned 100%
      707:  464:             return;
        -:  465:    }
        -:  466:    
      686:  467:             fprintf(stdout, "%s\n","comma.");
call    0 returned 100%
        -:  468:}
        -:  469:
        -:  470:
        -:  471:/*************************************/
        -:  472:/* NAME:        is_spec_symbol       */
        -:  473:/* INPUT:       a pointer to a token */
        -:  474:/* OUTPUT:      a BOOLEAN value      */
        -:  475:/*************************************/
function is_spec_symbol called 115442 returned 100% blocks executed 100%
   115442:  476:static int is_spec_symbol(str)
        -:  477:    token str;
        -:  478:{
   115442:  479:    if (!strcmp(str,"("))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  480:    {  
     1862:  481:        return(TRUE);
        -:  482:    }
   113580:  483:    if (!strcmp(str,")"))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  484:    {
     2026:  485:        return(TRUE);
        -:  486:    }
   111554:  487:    if (!strcmp(str,"["))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  488:    {
     2050:  489:        return(TRUE);
        -:  490:    }
   109504:  491:    if (!strcmp(str,"]"))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  492:    {
     2192:  493:        return(TRUE);
        -:  494:    }
   107312:  495:    if (!strcmp(str,"'"))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  496:    {
     2026:  497:        return(TRUE);
        -:  498:    }
   105286:  499:    if (!strcmp(str,"`"))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  500:    {
     2108:  501:        return(TRUE);
        -:  502:    }
   103178:  503:    if (!strcmp(str,","))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  504:    {
     2094:  505:        return(TRUE);
        -:  506:    }
   101084:  507:    return(FALSE);     /* others return FALSE */
        -:  508:}
        -:  509:
        -:  510:
