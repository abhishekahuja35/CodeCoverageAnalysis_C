        -:    0:Source:schedule2.c
        -:    0:Graph:schedule2.gcno
        -:    0:Data:schedule2.gcda
        -:    0:Runs:2710
        -:    1:
        -:    2:/* $Log: schedule.c,v $
        -:    3: * Revision 1.4  1993/05/04  12:23:58  foster
        -:    4: * Debug stuff removed
        -:    5: *
        -:    6: * Revision 1.3  1993/05/03  20:27:04  foster
        -:    7: * Full Functionality
        -:    8: *
        -:    9: * Revision 1.2  1993/05/03  15:41:01  foster
        -:   10: * Restructure functions
        -:   11: *
        -:   12: * Revision 1.1  1993/05/01  11:38:04  foster
        -:   13: * Initial revision
        -:   14: * */
        -:   15:
        -:   16:#include <stdio.h>
        -:   17:#include "schedule2.h"
        -:   18:
        -:   19:static struct process * current_job;
        -:   20:static int next_pid = 0;
        -:   21:
        -:   22:int
function enqueue called 62145 returned 100% blocks executed 100%
    62145:   23:enqueue(prio, new_process)
        -:   24:     int prio;
        -:   25:     struct process *new_process;
        -:   26:{
        -:   27:    int status;
    62145:   28:    put_end(prio, new_process); /* removed status code */
call    0 returned 100%
    62145:   29:    return(reschedule(prio));
call    0 returned 100%
        -:   30:}
        -:   31:
        -:   32:struct queue
        -:   33:{
        -:   34:    int length;
        -:   35:    struct process *head;
        -:   36:};
        -:   37:
        -:   38:static struct queue prio_queue[MAXPRIO + 1]; /* blocked queue is [0] */
        -:   39:
        -:   40:
        -:   41:
function main called 2710 returned 0% blocks executed 87%
     2710:   42:main(argc, argv) /* n3, n2, n1 : # of processes at prio3 ... */
        -:   43:int argc;
        -:   44:char *argv[];
        -:   45:{
        -:   46:    int command, prio;
        -:   47:    float ratio;
        -:   48:    int nprocs, status, pid;
        -:   49:    struct process *process;
     2710:   50:    if(argc != MAXPRIO + 1) exit_here(BADNOARGS);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 0%
    10656:   51:    for(prio = MAXPRIO; prio > 0; prio--)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   52:    {
     8007:   53:	if((nprocs = atoi(argv[MAXPRIO + 1 - prio])) < 0) exit_here(BADARG);
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
call    3 returned 0%
    35735:   54:	for(; nprocs > 0; nprocs--)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:   55:	{
   27758*:   56:	    if(status = new_job(prio)) exit_here(status);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   57:	}
        -:   58:    }
        -:   59:    /* while there are commands, schedule it */
    90443:   60:    while((status = get_command(&command, &prio, &ratio)) > 0)
call    0 returned 100%
branch  1 taken 97%
branch  2 taken 3% (fallthrough)
        -:   61:    {
    87794:   62:	schedule(command, prio, ratio);
call    0 returned 100%
        -:   63:    }
    2649*:   64:    if(status < 0) exit_here(status); /* Real bad error */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     2649:   65:    exit_here(OK);
call    0 returned 0%
        -:   66:}
        -:   67:
        -:   68:int 
function get_command called 90443 returned 100% blocks executed 100%
    90443:   69:get_command(command, prio, ratio)
        -:   70:    int *command, *prio;
        -:   71:    float *ratio;
        -:   72:{
    90443:   73:    int status = OK;
        -:   74:    char buf[CMDSIZE];
    90443:   75:    if(fgets(buf, CMDSIZE, stdin))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
        -:   76:    {
    87794:   77:	*prio = *command = -1; *ratio =-1.0;
    87794:   78:	sscanf(buf, "%d", command);
    87794:   79:	switch(*command)
branch  0 taken 15%
branch  1 taken 15%
branch  2 taken 14%
branch  3 taken 56%
        -:   80:	{
    13594:   81:	  case NEW_JOB :
    13594:   82:	    sscanf(buf, "%*s%d", prio);
    13594:   83:	    break;
    13134:   84:	  case UNBLOCK :
    13134:   85:	    sscanf(buf, "%*s%f", ratio);
    13134:   86:	    break;
    12314:   87:	  case UPGRADE_PRIO :
    12314:   88:	    sscanf(buf, "%*s%d%f", prio, ratio);
    12314:   89:	    break;
        -:   90:	}
        -:   91:	 /* Find end of  line of input if no EOF */
    88006:   92:	while(buf[strlen(buf)-1] != '\n' && fgets(buf, CMDSIZE, stdin));
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 96%
branch  4 taken 4% (fallthrough)
    87794:   93:	return(TRUE);
        -:   94:    }
     2649:   95:    else return(FALSE);
        -:   96:}
        -:   97:
function exit_here called 2710 returned 0% blocks executed 100%
     2710:   98:exit_here(status)
        -:   99:     int status;
        -:  100:{
     2710:  101:    exit(abs(status));
        -:  102:}
        -:  103:
        -:  104:
        -:  105:int 
function new_job called 41352 returned 100% blocks executed 67%
    41352:  106:new_job(prio) /* allocate new pid and process block. Stick at end */
        -:  107:     int prio;
        -:  108:{
    41352:  109:    int pid, status = OK;
        -:  110:    struct process *new_process;
    41352:  111:    pid = next_pid++;
    41352:  112:    new_process = (struct process *) malloc(sizeof(struct process));
   41352*:  113:    if(!new_process) status = MALLOC_ERR;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  114:    else
        -:  115:    {
    41352:  116:	new_process->pid = pid;
    41352:  117:	new_process->priority = prio;
    41352:  118:	new_process->next = (struct process *) 0;
    41352:  119:	status = enqueue(prio, new_process);
call    0 returned 100%
    41352:  120:	if(status)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  121:	{
    #####:  122:	    free(new_process); /* Return process block */
        -:  123:	}
        -:  124:    }
   41352*:  125:    if(status) next_pid--; /* Unsuccess. Restore pid */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    41352:  126:    return(status);
        -:  127:}
        -:  128:
function upgrade_prio called 12314 returned 100% blocks executed 100%
    12314:  129:int upgrade_prio(prio, ratio) /* increment priority at ratio in queue */
        -:  130:     int prio;
        -:  131:     float ratio;
        -:  132:{
        -:  133:    int status;
        -:  134:    struct process * job;
    12314:  135:    if(prio < 1 || prio > MAXLOPRIO) return(BADPRIO);
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
    11169:  136:    if((status = get_process(prio, ratio, &job)) <= 0) return(status);
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
        -:  137:    /* We found a job in that queue. Upgrade it */
     2592:  138:    job->priority = prio + 1;
     2592:  139:    return(enqueue(prio + 1, job));
call    0 returned 100%
        -:  140:}
        -:  141:
        -:  142:int
function block called 12700 returned 100% blocks executed 100%
    12700:  143:block() /* Put current job in blocked queue */
        -:  144:{
        -:  145:    struct process * job;
    12700:  146:    job = get_current();
call    0 returned 100%
    12700:  147:    if(job)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:  148:    {
     6633:  149:	current_job = (struct process *)0; /* remove it */
     6633:  150:	return(enqueue(BLOCKPRIO, job)); /* put into blocked queue */
call    0 returned 100%
        -:  151:    }
     6067:  152:    return(OK);
        -:  153:}
        -:  154:
        -:  155:int
function unblock called 13134 returned 100% blocks executed 100%
    13134:  156:unblock(ratio) /* Restore job @ ratio in blocked queue to its queue */
        -:  157:     float ratio;
        -:  158:{
        -:  159:    int status;
        -:  160:    struct process * job;
    13134:  161:    if((status = get_process(BLOCKPRIO, ratio, &job)) <= 0) return(status);
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
        -:  162:    /* We found a blocked process. Put it where it belongs. */
     5057:  163:    return(enqueue(job->priority, job));
call    0 returned 100%
        -:  164:}
        -:  165:
        -:  166:int
function quantum_expire called 12358 returned 100% blocks executed 100%
    12358:  167:quantum_expire() /* put current job at end of its queue */
        -:  168:{
        -:  169:    struct process * job;
    12358:  170:    job = get_current();
call    0 returned 100%
    12358:  171:    if(job)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -:  172:    {
     6511:  173:	current_job = (struct process *)0; /* remove it */
     6511:  174:	return(enqueue(job->priority, job));
call    0 returned 100%
        -:  175:    }
     5847:  176:    return(OK);
        -:  177:}
        -:  178:
        -:  179:int
function finish called 48538 returned 100% blocks executed 100%
    48538:  180:finish() /* Get current job, print it, and zap it. */
        -:  181:{
        -:  182:    struct process * job;
    48538:  183:    job = get_current();
call    0 returned 100%
    48538:  184:    if(job)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  185:    {
    32489:  186:	current_job = (struct process *)0;
    32489:  187:	reschedule(0);
call    0 returned 100%
    32489:  188:	fprintf(stdout, " %d", job->pid);
call    0 returned 100%
    32489:  189:	free(job);
    32489:  190:	return(FALSE);
        -:  191:    }
    16049:  192:    else return(TRUE);
        -:  193:}
        -:  194:
        -:  195:int
function flush called 11525 returned 100% blocks executed 100%
    11525:  196:flush() /* Get all jobs in priority queues & zap them */
        -:  197:{
    39743:  198:    while(!finish());
call    0 returned 100%
branch  1 taken 71%
branch  2 taken 29% (fallthrough)
    11525:  199:    fprintf(stdout, "\n");
call    0 returned 100%
    11525:  200:    return(OK);
        -:  201:}
        -:  202:
        -:  203:struct process * 
function get_current called 168230 returned 100% blocks executed 100%
   168230:  204:get_current() /* If no current process, get it. Return it */
        -:  205:{
        -:  206:    int prio;
   168230:  207:    if(!current_job)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:  208:    {
   243773:  209:	for(prio = MAXPRIO; prio > 0; prio--)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  210:	{ /* find head of highest queue with a process */
   205744:  211:	    if(get_process(prio, 0.0, &current_job) > 0) break;
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
        -:  212:	}
        -:  213:    }
   168230:  214:    return(current_job);
        -:  215:}
        -:  216:
        -:  217:int
function reschedule called 94634 returned 100% blocks executed 100%
    94634:  218:reschedule(prio) /* Put highest priority job into current_job */
        -:  219:     int prio;
        -:  220:{
    94634:  221:    if(current_job && prio > current_job->priority)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  222:    {
     2342:  223:	put_end(current_job->priority, current_job);
call    0 returned 100%
     2342:  224:	current_job = (struct process *)0;
        -:  225:    }
    94634:  226:    get_current(); /* Reschedule */
call    0 returned 100%
    94634:  227:    return(OK);
        -:  228:}
        -:  229:
        -:  230:int 
function schedule called 87794 returned 100% blocks executed 100%
    87794:  231:schedule(command, prio, ratio)
        -:  232:    int command, prio;
        -:  233:    float ratio;
        -:  234:{
    87794:  235:    int status = OK;
    87794:  236:    switch(command)
branch  0 taken 15%
branch  1 taken 14%
branch  2 taken 14%
branch  3 taken 14%
branch  4 taken 15%
branch  5 taken 10%
branch  6 taken 13%
branch  7 taken 4%
        -:  237:    {
    13594:  238:      case NEW_JOB :
    13594:  239:        status = new_job(prio);
call    0 returned 100%
    13594:  240:	break;
    12358:  241:      case QUANTUM_EXPIRE :
    12358:  242:        status = quantum_expire();
call    0 returned 100%
    12358:  243:	break;
    12314:  244:      case UPGRADE_PRIO :
    12314:  245:        status = upgrade_prio(prio, ratio);
call    0 returned 100%
    12314:  246:	break;
    12700:  247:      case BLOCK :
    12700:  248:        status = block();
call    0 returned 100%
    12700:  249:	break;
    13134:  250:      case UNBLOCK :
    13134:  251:        status = unblock(ratio);
call    0 returned 100%
    13134:  252:	break;
     8795:  253:      case FINISH :
     8795:  254:        finish();
call    0 returned 100%
     8795:  255:	fprintf(stdout, "\n");
call    0 returned 100%
     8795:  256:	break;
    11525:  257:      case FLUSH :
    11525:  258:        status = flush();
call    0 returned 100%
    11525:  259:	break;
     3374:  260:      default:
     3374:  261:	status = NO_COMMAND;
        -:  262:    }
    87794:  263:    return(status);
        -:  264:}
        -:  265:
        -:  266:
        -:  267:
        -:  268:
        -:  269:int 
function put_end called 64487 returned 100% blocks executed 100%
    64487:  270:put_end(prio, process) /* Put process at end of queue */
        -:  271:     int prio;
        -:  272:     struct process *process;
        -:  273:{
        -:  274:    struct process **next;
    64487:  275:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 100%
        -:  276:     /* find end of queue */
   156243:  277:    for(next = &prio_queue[prio].head; *next; next = &(*next)->next);
branch  0 taken 59%
branch  1 taken 41% (fallthrough)
    64320:  278:    *next = process;
    64320:  279:    prio_queue[prio].length++;
    64320:  280:    return(OK);
        -:  281:}
        -:  282:
        -:  283:int 
function get_process called 230047 returned 100% blocks executed 94%
   230047:  284:get_process(prio, ratio, job)
        -:  285:     int prio;
        -:  286:     float ratio;
        -:  287:     struct process ** job;
        -:  288:{
        -:  289:    int length, index;
        -:  290:    struct process **next;
  230047*:  291:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   230047:  292:    if(ratio < 0.0 || ratio > 1.0) return(BADRATIO); /* Somebody else goofed */
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 100%
   229776:  293:    length = prio_queue[prio].length;
   229776:  294:    index = ratio * length;
   229776:  295:    index = index >= length ? length -1 : index; /* If ratio == 1.0 */
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
   234227:  296:    for(next = &prio_queue[prio].head; index && *next; index--)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
branch  2 taken 3%
branch  3 taken 97% (fallthrough)
     4451:  297:        next = &(*next)->next; /* Count up to it */
   229776:  298:    *job = *next;
   229776:  299:    if(*job)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  300:    {
    57101:  301:	*next = (*next)->next; /* Mend the chain */
    57101:  302:	(*job)->next = (struct process *) 0; /* break this link */
    57101:  303:	prio_queue[prio].length--;
    57101:  304:	return(TRUE);
        -:  305:    }
   172675:  306:    else return(FALSE);
        -:  307:}
